## 1141 PAT Ranking of Institutions (25 分)

```cpp
#include <iostream>
#include <cctype>
#include <string>
#include <algorithm>
#include <vector>
#include <unordered_map>
using namespace std;

struct Node {
    string code;
    int totalA, totalB, totalT, tws, n;
    Node(): totalA(0), totalB(0), totalT(0), tws(0), n(0) {}
};

void toLower(string& s) {
    for (int i=0; i<s.size(); i++)
        s[i] = tolower(s[i]);
}

bool cmp(const Node& a, const Node& b) {
    if (a.tws != b.tws) return a.tws>b.tws;
    if (a.n != b.n) return a.n<b.n;
    return a.code<b.code;
}

int main() {
    int N, i, score, p=1, idx_;
    string id, code;
    cin >> N;
    vector<Node> v(N+1); // 从1开始，0作为特殊值。
    unordered_map<string, int> idx;
    while (N--) {
        cin >> id >> score >> code;
        toLower(code);
        if (idx[code] == 0) {
            v[p].code = code;
            idx[code] = p++;
        }
        idx_ = idx[code];
        if (id[0]=='A')
            v[idx_].totalA += score;
        else if (id[0]=='B')
            v[idx_].totalB += score;
        else
            v[idx_].totalT += score;
        v[idx_].n++;
    }
    for (i=0; i<p; i++) {
        v[i].tws = v[i].totalB/1.5 + v[i].totalA + v[i].totalT*1.5;
    }
    sort(v.begin()+1, v.begin()+p, cmp);
    int rank = 1;
    printf("%d\n", p-1);
    printf("1 %s %d %d\n", v[1].code.c_str(), v[1].tws, v[1].n);
    for (i=2; i<p; i++) {
        if (v[i].tws != v[i-1].tws)
            rank = i;
        printf("%d %s %d %d\n", rank, v[i].code.c_str(), v[i].tws, v[i].n);
    }
}
```


## 1142 Maximal Clique (25 分)

1. 注意，下面是局部变量，调用了vector的ctor，但其中的bool元素不会默认初始化，其值是未定义的。
2. 虽然无边权且输入给出了一个结点邻接的所有结点，但由于要频繁判断两个结点是否邻接，所以不用邻接表，而用邻接矩阵。

```cpp
#include <iostream>
#include <vector>
using namespace std;

// 虽然无边权且输入给出了一个结点邻接的所有结点，但由于要频繁判断两个结点是否邻接，所以不用邻接表，而用邻接矩阵。
bool edge[201][201]; // 结点从1开始编号。

int nodes[200]; // 从0开始存储结点的ID。

int main() {
    int N, M, K, i, x, y, n, j;
    bool flag, flag2;
    scanf("%d %d", &N, &M);
    // XXX 注意，下面是局部变量，调用了vector的ctor，但其中的bool元素不会默认初始化，其值是未定义的。
    vector<bool> input(N+1); // 结点ID从1开始。
    while (M--) {
        scanf("%d %d", &x, &y);
        edge[x][y] = edge[y][x] = true;
    }
    scanf("%d", &K);
    while (K--) {
        scanf("%d", &n);
        for (i=0; i<n; i++) {
            scanf("%d", nodes+i);
            input[nodes[i]] = true;
        }
        for (i=1; i<=N; i++) // 多次查询，记得重置变量，以免影响到下一次查询。
            input[i] = false;
        flag = true;
        for (i=0; i<n; i++) {
            for (j=0; j<n; j++) {
                if (i == j)
                    continue;
                if (!edge[nodes[i]][nodes[j]]) {
                    flag = false;
                    break;
                }
            }
        }
        if (flag) {
            // 考察输入的结点序列以外的点是否与输入的结点序列中每一个点都两两邻接。
            for (i=1; i<=N; i++) {
                if (input[i])
                    continue;
                flag2 = true;
                for (j=0; j<n; j++) {
                    if (!edge[nodes[j]][i]) {
                        flag2 = false;
                        break;
                    }
                }
                if (flag2)
                    break;
            }
            if (flag2)
                printf("Not Maximal\n");
            else
                printf("Yes\n");
        } else {
            printf("Not a Clique\n");
        }
    }
}
```


## 1143 Lowest Common Ancestor (30 分)

1. 大佬的代码：https://blog.csdn.net/liuchuo/article/details/79618849
2. 利用二叉搜索树的性质，根大于左子树，小于（等于）右子树。
3. 想象一下这个过程，可以知道遍历先序序列的做法是正确的。如果x和y分别小于和大于一个结点，那么这个结点一定是x和y的最近公共祖先，因为x和y分别在该结点的左右子树上。
4. 这里有一篇以普通二叉树来讨论LCA问题的博客：http://www.cppblog.com/menjitianya/archive/2015/12/10/212447.html

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

// 利用二叉搜索树的性质，根大于左子树，小于（等于）右子树。

int main() {
    int N, M, i, x, y, a;
    scanf("%d %d", &M, &N);
    vector<int> pre(N);
    unordered_map<int, bool> book;
    for (i=0; i<N; i++) {
        scanf("%d", &pre[i]);
        book[pre[i]] = true;
    }
    while (M--) {
        scanf("%d %d", &x, &y);
        for (i=0; i<N; i++) {
            a = pre[i];
            if ((x<a&&y>a) || (x>a&&y<a) || (x==a) || (y==a))
                break;
        }
        if (!book[x] && !book[y])
            printf("ERROR: %d and %d are not found.\n", x, y);
        else if (!book[x] || !book[y])
            printf("ERROR: %d is not found.\n", book[x]? y: x);
        else if (a==x || a==y)
            printf("%d is an ancestor of %d.\n", a==x? x: y, a==x? y: x);
        else
            printf("LCA of %d and %d is %d.\n", x, y, a);
    }
}
```


## 1144 The Missing Number (20 分)

```cpp
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
    int N, x, i;
    unordered_map<int, bool> book;
    scanf("%d", &N);
    while (N--) {
        scanf("%d", &x);
        if (x > 0)
            book[x] = true;
    }
    for (i=1; ; i++) {
        if (!book[i]) {
            printf("%d\n", i);
            break;
        }
    }
}
```


## 1145 Hashing - Average Search Time (25 分)

1. Quadratic probing，二次退避，idx=(hash(key)+i*i)%Msize，i从0开始。
2. 注意搜索结束的条件。

```cpp
#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;

int Msize;

vector<int> table;

int hash_(int key) {
    return key%Msize;
}

bool insert(int key) {
    int h = hash_(key);
    int i;
    bool flag = false;
    // for (i=0; i*i<Msize; i++) {
    for (i=0; i<Msize; i++) {
        if (table[(h+i*i)%Msize] == -1) {
            table[(h+i*i)%Msize] = key;
            flag = true;
            break;
        }
    }
    return flag;
}

int cnt;

void find(int key) {
    int h = hash_(key);
    // for (int i=0; i*i<Msize; i++) {
    for (int i=0; i<=Msize; i++) { // 虽然i==Msize时继续循环是没有意义的，因为(i*i)%Msize==0，但不这么写，就过不了测试。
        cnt++;
        if (table[(h+i*i)%Msize]==key || table[(h+i*i)%Msize]==-1)
            break;
    }
}

bool isPrime(int x) {
    int sq = sqrt(x);
    for (int i=2; i<=sq; i++)
        if (x%i == 0)
            return false;
    return true;
}

int main() {
    int N, M, x, i;
    bool success;
    scanf("%d %d %d", &Msize, &N, &M);
    // Note that the table size is better to be prime. If the maximum size given by the user is not prime,
    // you must re-define the table size to be the smallest prime number which is larger than the size given by the user.
    // 记得要把Msize调整为最近的质数。
    while (!isPrime(Msize))
        Msize++;
    table.resize(Msize);
    fill(table.begin(), table.end(), -1);
    while (N--) {
        scanf("%d", &x);
        success = insert(x);
        if (!success)
            printf("%d cannot be inserted.\n", x);
    }
    for (i=0; i<M; i++) {
        scanf("%d", &x);
        find(x);
    }
    printf("%.1f\n", cnt*1.0/M);
}

```


## 1146 Topological Order (25 分)

1. 只有有向无环图才有拓扑序列，拓扑序列可通过对有向无环图应用拓扑排序获得，循环执行一下的步骤，每次选择一个入度为0的结点，删去它及所有出边，直到所有结点都被删去。
2. 没有边权且输入给出了一个结点指向的所有结点，故可用邻接表存储图，另外还要存储每个结点的入度。

```cpp
#include <iostream>
#include <vector>
using namespace std;

vector<vector<int>> graph;

vector<int> inDegree;

vector<int> a;

vector<int> result;

int main() {
    int N, M, K, i, j, x, y;
    scanf("%d %d", &N, &M);
    graph.resize(N+1); // 结点从1开始编号。
    inDegree.resize(N+1); // 注意，没有默认初始化。
    fill(inDegree.begin(), inDegree.end(), 0);
    a.resize(N);
    while (M--) {
        scanf("%d %d", &x, &y);
        graph[x].push_back(y); // 有向图。
        inDegree[y]++;
    }
    scanf("%d", &K);
    vector<int> temp;
    for (i=0; i<K; i++) {
        // 根据实际情况，这里选择全部接受完输入再处理。
        for (j=0; j<N; j++)
            scanf("%d", &a[j]);
        temp = inDegree;
        for (j=0; j<N; j++) {
            if (temp[a[j]] != 0) {
                result.push_back(i);
                break;
            }
            for (int x: graph[a[j]])
                temp[x]--;
        }
    }
    printf("%d", result[0]);
    for (i=1; i<result.size(); i++)
        printf(" %d", result[i]);
}
```


## 1147 Heaps (30 分)

1. 用数组存储完全二叉树，从1开始，否则2*i会失效。
2. 最大堆的根大于左右子堆，可以用后序遍历，从底下开始逐步确定每一个子堆是否是最大堆。
3. 也可以利用完全二叉树表示堆及使用数组存储的特性，从最后一个非叶结点开始，逐步判断每一个子堆是否是最大/最小堆。

```cpp
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int N, M;

int cbt[1001];

vector<int> postorder;

pair<int, bool> postorderTraversal1(int root) {
    if (root > N)
        return pair<int, bool>(INT_MIN, true);
    auto p1 = postorderTraversal1(root*2);
    auto p2 = postorderTraversal1(root*2+1);
    postorder.push_back(cbt[root]);
    if (p1.second && p2.second && p1.first<cbt[root] && p2.first<cbt[root])
        return pair<int, bool>(cbt[root], true);
    return pair<int, bool>(-1, false);
}

pair<int, bool> postorderTraversal2(int root) {
    if (root > N)
        return pair<int, bool>(INT_MAX, true);
    auto p1 = postorderTraversal2(root*2);
    auto p2 = postorderTraversal2(root*2+1);
    if (p1.second && p2.second && p1.first>cbt[root] && p2.first>cbt[root])
        return pair<int, bool>(cbt[root], true);
    return pair<int, bool>(-1, false);
}

int main() {
    int i;
    pair<int, bool> p1, p2;
    scanf("%d %d", &M, &N);
    while (M--) {
        for (i=1; i<=N; i++) // 完全二叉树从1开始存储。
            scanf("%d", cbt+i);
        postorder.clear();
        p1 = postorderTraversal1(1);
        if (p1.second) {
            printf("Max Heap\n");
        } else {
            p2 = postorderTraversal2(1);
            if (p2.second)
                printf("Min Heap\n");
            else
                printf("Not Heap\n");
        }
        printf("%d", postorder[0]);
        for (i=1; i<N; i++)
            printf(" %d", postorder[i]);
        printf("\n");
    }
}
```

```cpp
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

int N, M;

int cbt[1001];

vector<int> postorder;

void postorderTraversal(int root) {
    if (root > N)
        return;
    postorderTraversal(root*2);
    postorderTraversal(root*2+1);
    postorder.push_back(cbt[root]);
}

bool isMaxHeap() {
    for (int i=N/2; i>=1; i--) {
        if (i*2<=N && cbt[i*2]>cbt[i])
            return false;
        if (i*2+1<=N && cbt[i*2+1]>cbt[i])
            return false;
    }
    return true;
}

bool isMinHeap() {
    for (int i=N/2; i>=1; i--) {
        if (i*2<=N && cbt[i*2]<cbt[i])
            return false;
        if (i*2+1<=N && cbt[i*2+1]<cbt[i])
            return false;
    }
    return true;
}

int main() {
    int i;
    scanf("%d %d", &M, &N);
    while (M--) {
        for (i=1; i<=N; i++) // 完全二叉树从1开始存储。
            scanf("%d", cbt+i);
        postorder.clear();
        if (isMaxHeap()) {
            printf("Max Heap\n");
        } else {
            if (isMinHeap())
                printf("Min Heap\n");
            else
                printf("Not Heap\n");
        }
        postorderTraversal(1);
        printf("%d", postorder[0]);
        for (i=1; i<N; i++)
            printf(" %d", postorder[i]);
        printf("\n");
    }
}
```


## 1148 Werewolf - Simple Version (20 分)

1. 实在没有思路时，尝试暴力破解，总比空着好。**而且题目中给出的数据量不大，就是在提示我们没有思路时试试暴力枚举**。
2. 这里可以枚举两个狼人，或枚举两个说谎的人，由于at least one but not all the werewolves were lying，即两个狼人，有且只有一个说谎，所以选前者。

```cpp
#include <iostream>
using namespace std;

int a[101]; // 编号从1开始，a[i]是玩家i说的话。

int main() {
    int N, i, j, k, n1, n2;
    scanf("%d", &N);
    for (i=1; i<=N; i++)
        scanf("%d", a+i);
    for (i=1; i<=N; i++) {
        for (j=i+1; j<=N; j++) {
            // 枚举两个狼人。
            n1 = n2 = 0;
            for (k=1; k<=N; k++) {
                if (a[k] < 0) { // 玩家k说玩家a[k]是狼人。
                    if (-a[k]!=i && -a[k]!=j) { // 玩家k说谎了。
                        if (k==i || k==j)
                            n1++;
                        else
                            n2++;
                    }
                } else { // 玩家k说玩家a[k]是平民。
                    if (a[k]==i || a[k]==j) { // 玩家k说谎了。
                        if (k==i || k==j)
                            n1++;
                        else
                            n2++;
                    }
                }
            }
            if (n1==1 && n1+n2==2) {
                printf("%d %d\n", i, j);
                return 0;
            }
        }
    }
    printf("No Solution\n");
}
```


## 1149 Dangerous Goods Packaging (25 分)

1. 如果该物品的不相容列表不为空，则将不相容的物品ID用unordered_map标记一下，之后如果该货物列表出现这些物品，则该货物列表不能打包到一起。

```cpp
#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

unordered_map<int, vector<int>> incompatible;

unordered_map<int, bool> book;

int goods[1000];

int main() {
    int N, M, K, x, y, i;
    bool flag;
    scanf("%d %d", &N, &M);
    for (i=0; i<N; i++) {
        scanf("%d %d", &x, &y);
        incompatible[x].push_back(y);
        incompatible[y].push_back(x);
    }
    while (M--) {
        scanf("%d", &K);
        for (i=0; i<K; i++)
            scanf("%d", goods+i);
        flag = true;
        book.clear(); // 多次查询，记得重置一些变量，避免影响到下一次查询。
        for (i=0; i<K; i++) {
            if (book[goods[i]]) {
                flag = false;
                break;
            }
            if (!incompatible[goods[i]].empty()) { // 如果该物品的不相容列表不为空，则将不相容的物品ID用map标记一下，之后如果该货物列表出现这些物品，则该货物列表不能打包到一起。
                for (int x: incompatible[goods[i]])
                    book[x] = true;
            }
        }
        if (flag)
            printf("Yes\n");
        else
            printf("No\n");
    }
}
```


## 1150 Travelling Salesman Problem (25 分)

```cpp
#include <iostream>
#include <algorithm>
#include <string>
#include <climits>
using namespace std;

int edge[201][201]; // 结点从1开始编号。

int path[2000]; // 虽然结点数最多200个，但输入的路径，结点可以重复，所以要多分配一些空间。

bool visited[201];

string types[3] = {"TS simple cycle", "TS cycle", "Not a TS cycle"};

int main() {
    int N, M, K, i, j, src, dst, dist, n, type, totalDist, flag, minDist=INT_MAX, minPath;
    scanf("%d %d", &N, &M);
    while (M--) {
        scanf("%d %d %d", &src, &dst, &dist);
        edge[src][dst] = edge[dst][src] = dist; // 无向图。
    }
    scanf("%d", &K);
    for (i=1; i<=K; i++) {
        scanf("%d", &n);
        for (j=0; j<n; j++) {
            scanf("%d", path+j);
            visited[path[j]] = true;
        }
        totalDist = 0;
        flag = true;
        for (j=1; j<n; j++) {
            if (edge[path[j]][path[j-1]] == 0) {
                flag = false;
                break;
            }
            totalDist += edge[path[j]][path[j-1]];
        }
        for (j=1; j<=N && visited[j]; j++)
            ;
        if (path[0]!=path[n-1] || j!=N+1 || !flag)
            type = 2;
        else if (n-1 == N)
            type = 0;
        else
            type = 1;
        printf("Path %d: ", i);
        if (flag)
            printf("%d (", totalDist);
        else
            printf("NA (");
        printf("%s)\n", types[type].c_str());
        if (flag && (type==1 || type==0) && totalDist<minDist) {
            minDist = totalDist;
            minPath = i;
        }
        fill(visited+1, visited+1+n, false);
    }
    printf("Shortest Dist(%d) = %d\n", minPath, minDist);
}
```
