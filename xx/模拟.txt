## 1008 Elevator (20 分)

1. 因为输入的信息可以在输入时就被利用/处理完，且后面不会用到，所以不需要用数组存储全部输入。

```cpp
#include <iostream>
using namespace std;

// int req[100];

int main() {
    // 从第0层开始，而不是第1层。
    int i, floor=0, n, sum=0; // floor表示当前电梯所处的楼层。
    cin >> n;
    while (n--) {
        cin >> i;
        if (i == floor) // 注意处理有连续两个相同的数字输入的情况。
            sum += 5;
        else if (i < floor)
            sum += (floor-i)*4 + 5;
        else
            sum += (i-floor)*6 + 5;
        floor = i;
    }
    cout << sum << endl;
}
```


## 1011 World Cup Betting (20 分)

```cpp
#include <cstdio>
using namespace std;

char results[3] = {'W', 'T', 'L'};
char buy[3];
float odds[3];
float maxOdds[3];

int main() {
    int i, j;
    for (i=0; i<3; i++) { // 对每一场比赛，
        scanf("%f %f %f", &odds[0], &odds[1], &odds[2]);
        for (j=0; j<3; j++) { // 赌该场比赛中几率最大的那个结果，
            if (odds[j] > maxOdds[i]) {
                maxOdds[i] = odds[j];
                buy[i] = results[j];
            }
        }
    }
    printf("%c %c %c %.2f\n", buy[0], buy[1], buy[2], (maxOdds[0]*maxOdds[1]*maxOdds[2]*0.65-1)*2);
}
```


## 1014 Waiting in Line (30 分)

1. 
For example, suppose that a bank has 2 windows and each window may have 2 custmers waiting inside the yellow line. There are 5 customers waiting with transactions taking 1, 2, 6, 4 and 3 minutes, respectively. At 08:00 in the morning, customer1 is served at window1 while customer2 is served at window2. Customer3 will wait in front of window1 and customer4 will wait in front of window​2. Customer5 will wait behind the yellow line.

At 08:01, customer1 is done and customer5 enters the line in front of window1 since that line seems shorter now. Customer2 will leave at 08:02, customer4 at 08:06, customer3 at 08:07, and finally customer​5 at 08:10.

2. 从题目给出的例子可以看出，已经在黄线队列中的人，不会因为看到其它队列有空位，或者看到其它队列早结束，就换到其它队列中去。然后客户没有上帝视角，肯定不知道那条队进那条队可以最早处理完，所以客户总是按顺序进到最早有空位的队列中去。
3. 这道题要好好看一下。
4. 注意题目给出的敏感数据，如N*M。
5. 参考：https://blog.csdn.net/acm_ted/article/details/20473255

```cpp
#include <iostream>
#include <algorithm>
#include <climits>
#include <queue>
using namespace std;

struct Window {
    int time_; // 该窗口可接待客户的时刻，单位是分钟。
    queue<int> q_;
    Window(): time_(8*60) {}
};

struct Customer {
    int start_; // 开始处理的时刻。
    int end_; // 处理完的时刻。
    int takes_; // 窗口处理该客户的业务所需时间。
    // Customer(int t): takes_(t) {}
    Customer() = default;
};

// The customers are numbered from 1 to K.
Customer cus[1001];
Window win[20];

// .bs节，默认初始化，类类型的默认初始化是调用默认ctor。
Window ws[20];

int main() {
    // N个窗口，黄线内一个窗口前可排M个客户，总共会有K个客户，有Q个查询，查询某个客户的事务在何时处理完。
    int N, M, K, Q, i, j, k, x, y;
    scanf("%d %d %d %d", &N, &M, &K, &Q);
    for (i=1; i<=K; i++) {
        scanf("%d", &cus[i].takes_);
    }
    // XXX 前M*N个客户直接入队，它们直接会进入最短的队列。
    // 注意客户数K可能小于M*N。
    for (i=1, j=0; i<=M*N && i<=K; i++, j=(j+1)%N) { // 取模循环遍历窗口。
        cus[i].start_ = win[j].time_;
        cus[i].end_ = cus[i].start_ + cus[i].takes_;
        win[j].time_ = cus[i].end_; // 更新窗口的完成时间。
        win[j].q_.push(i);
    }
    // XXX 后面的客户进入最早有空的队列，这只看每个窗口第一个正在处理的客户的结束时间。
    for (; i<=K; i++) {
        // 找到最先有空位的队列。
        y = INT_MAX;
        for (j=0; j<N; j++) {
            x = win[j].q_.front();
            if (cus[x].end_ < y) {
                k = j;
                y = cus[x].end_;
            }
        }
        cus[i].start_ = win[k].time_;
        cus[i].end_ = cus[i].start_ + cus[i].takes_;
        win[k].time_ = cus[i].end_;
        win[k].q_.pop();
        win[k].q_.push(i);
    }
    // N个队列中的元素丢掉即可，因为我们已经在push时处理得到想要的信息了。
    for (i=0; i<Q; i++) {
        scanf("%d", &x);
        // for those customers who cannot be served before 17:00, you must output Sorry instead.
        if (cus[x].start_ >= 17*60) {
            printf("Sorry\n");
        } else {
            printf("%02d:%02d\n", cus[x].end_/60, cus[x].end_%60);
        }
    }
}
```


## 1026 Table Tennis (30 分)

1. 对于一个player数组，其中有一些是vip，有一些不是，那么我们可以用**双指针**，一个指针遍历非vip，一个指针遍历vip。
2. 题目如果没有说编号从0还是1开始，一般认为是从1开始。
3. 有桌子总是先考虑vip。（优先级最高，并不需要老实排队，可以插队）
4. 时间一般不要小时、分钟等分别存储，而是换算成秒数或分钟数，只用一个成员存储。然后在输出时再换算回来。
5. 这道题虽然有优先队列的意思，但不适合用std::priority_queue做。
6. 不要惧怕每次循环都要O(N)会超时，先把程序跑起来。

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

struct person {
    int arrive, start, time;
    bool vip;
}tempperson;

struct tablenode {
    int end = 8 * 3600, num; // end表示可接受服务的时间。
    bool vip;
};
bool cmp1(person a, person b) {
    return a.arrive < b.arrive;
}
bool cmp2(person a, person b) {
    return a.start < b.start;
}

vector<person> player;
vector<tablenode> table;

void alloctable(int personid, int tableid) {
	// 要考虑玩家到达时间比某一桌子的结束时间晚的情况。
    if(player[personid].arrive <= table[tableid].end)
        player[personid].start = table[tableid].end;
    else
        player[personid].start = player[personid].arrive;
    table[tableid].end = player[personid].start + player[personid].time;
    table[tableid].num++; // 自增桌子的使用次数。
}

int findnextvip(int vipid) {
    vipid++;
    while(vipid < player.size() && player[vipid].vip == false) vipid++;
    return vipid;
}

int main() {
    int n, k, m, viptable;
    scanf("%d", &n);
    for(int i = 0; i < n; i++) {
        int h, m, s, temptime, flag;
        scanf("%d:%d:%d %d %d", &h, &m, &s, &temptime, &flag);
        tempperson.arrive = h * 3600 + m * 60 + s;
        tempperson.start = 21 * 3600;
        if(tempperson.arrive >= 21 * 3600) continue; // 如果等到21点还没有桌子的就不需要服务了，而且到达时间大于21点的肯定不需要服务了。
        tempperson.time = temptime <= 120 ? temptime * 60 : 7200; // It is assumed that every pair of players can play for at most 2 hours.
        tempperson.vip = ((flag == 1) ? true : false);
        player.push_back(tempperson);
    }
    scanf("%d%d", &k, &m);
    table.resize(k + 1); // 一次性分配空间。
    for(int i = 0; i < m; i++) {
        scanf("%d", &viptable);
        table[viptable].vip = true;
    }
    sort(player.begin(), player.end(), cmp1); // 按照到达时间升序排序。
    int i = 0, vipid = -1;
    vipid = findnextvip(vipid);
    while(i < player.size()) {
		// XXX 找到一个最早可以接受服务的桌子。
		// 不要惧怕每次循环都要O(N)会超时，先把程序跑起来。
        int index = -1, minendtime = 999999999;
        for(int j = 1; j <= k; j++) {
            if(table[j].end < minendtime) {
                minendtime = table[j].end;
                index = j;
            }
        }
        if(table[index].end >= 21 * 3600) break;
        if(player[i].vip == true && i < vipid) {
            i++; // 双指针，该vip已经先服务过了，遍历下一个player。
            continue;
        }
        if(table[index].vip == true) { // 有vip桌子。
            if(player[i].vip == true) { // 如果当前player就是vip，给它。
                alloctable(i, index);
                vipid = findnextvip(vipid);
                i++;
            } else {
				// 否则，优先查看队列中下一个最早到达的vip，如果其在桌子可用前就到达了，就给他。
                if(vipid < player.size() && player[vipid].arrive <= table[index].end) {
                    alloctable(vipid, index);
                    vipid = findnextvip(vipid);
                } else {
				// 否则，先给普通的player使用。
                    alloctable(i, index);
                    i++;
                }
            }
        } else { // 有普通的桌子。
            if(player[i].vip == false) { // 普通player。
                alloctable(i, index);
                i++;
            } else {
				// 当前轮到的这位是vip，vip**尽量**使用vip桌子。
				// 找到一张最早可用的vip桌子。
                int vipindex = -1, minvipendtime = 999999999;
                for(int j = 1; j <= k; j++) {
                    if(table[j].vip == true && table[j].end < minvipendtime) {
                        minvipendtime = table[j].end;
                        vipindex = j;
                    }
                }
				// 如果该vip到达时已有一张vip桌子可用，那就把这张vip桌子分配给当前轮到的这位vip，而那张普通桌子则先不用（**即先不递增其end成员**）
                if(player[i].arrive >= table[vipindex].end) {
                    alloctable(i, vipindex);
                    vipid = findnextvip(vipid);
                    i++;
                } else {
				// 否则，把普通桌子分配给vip。
                    alloctable(i, index);
                    vipid = findnextvip(vipid);
                    i++;
                }
            }
        }
    }
    sort(player.begin(), player.end(), cmp2); // 按照服务时间排序。
    for(i = 0; i < player.size() && player[i].start < 21 * 3600; i++) {
        printf("%02d:%02d:%02d ", player[i].arrive / 3600, player[i].arrive % 3600 / 60, player[i].arrive % 60);
        printf("%02d:%02d:%02d ", player[i].start / 3600, player[i].start % 3600 / 60, player[i].start % 60);
        printf("%.0f\n", round((player[i].start - player[i].arrive) / 60.0));
    }
    for(int i = 1; i <= k; i++) {
        if(i != 1) printf(" ");
        printf("%d", table[i].num);
    }
    return 0;
}
```


## 1042 Shuffling Machine (20 分)

1. 奇次数和偶次数，循环轮流使用s和s1，这样就不用反复赋值/拷贝了。

```cpp
#include <iostream>
#include <string>
using namespace std;

// A given order is a permutation of distinct integers in [1, 54].

// 注意下标从1开始。
string s[55] = {"", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", "S11", "S12", "S13", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8", "H9", "H10", "H11", "H12", "H13", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "C10", "C11", "C12", "C13", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "J1", "J2"};

string s1[55];

int a[55];

int main() {
    int i, j, n;
    scanf("%d", &n);
    for (i=1; i<55; i++) {
        scanf("%d", a+i);
    }
    for (i=0; i<n; i++) {
        for (j=1; j<55; j++) {
            // 奇次数和偶次数，循环轮流使用s和s1。
            if (i%2 == 0)
                s1[a[j]] = s[j];
            else
                s[a[j]] = s1[j];
        }
    }
    string (&r)[55] = (n%2==1)? s1: s; // 引用，避免拷贝。
    printf("%s", r[1].c_str());
    for (i=2; i<55; i++)
        printf(" %s", r[i].c_str());
}
```


## 1056 Mice and Rice (25 分)

1. 双指针，使用同一个数组插入，由于消耗比插入快，所以可以保证不会覆盖未被使用到的信息。

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

struct Player {
    int id;
    int level;
    int weight;
    int rank;
};

Player players[1000];

int order[1000];

int NP, NG, i, j, k, max_, maxI_, n, level;

int main() {
    scanf("%d %d", &NP, &NG);
    for (i=0; i<NP; i++) {
        scanf("%d", &players[i].weight);
        players[i].id = i;
    }
    for (i=0; i<NP; i++)
        scanf("%d", order+i);
    n = NP;
    if (n == 1) {
        printf("1\n");
        return 0;
    }
    // 由于使用淘汰制，所以比赛流程图是一层一层的，所以这里逐层处理。
    for (level=1; level<1000 && n!=1; level++) {
        k = 0;
        for (i=0; i<n; i+=NG) {
            // 考察一组NG个player中的胜者。
            max_ = -1;
            for (j=i; j<i+NG && j<n; j++) { // 注意这里的判断`j<i+NG && j<n`，防止数组访问越界。
                players[order[j]].level = level; // 给在该层比赛的player赋予该层的level，晋级者会在下一个level再被赋予一个更高的level。
                if (players[order[j]].weight > max_) {
                    max_ = players[order[j]].weight;
                    maxI_ = j;
                }
            }
            // 双指针，使用同一个数组插入，由于消耗比插入快，所以可以保证不会覆盖未被使用到的信息。
            order[k++] = order[maxI_]; // 晋级的player的id。
        }
        n = k; // 新一轮比赛的人数。
    }
    players[order[0]].level = level; // 注意这里给最终冠军赋予一个比亚军更高的level。
    sort(players, players+NP, [](const Player& a, const Player& b){ return a.level>b.level; }); // 按level降序排序。
    players[0].rank = 1;
    for (i=1; i<NP; i++) {
        if (players[i].level == players[i-1].level)
            players[i].rank = players[i-1].rank;
        else
            players[i].rank = i+1;
    }
    sort(players, players+NP, [](const Player& a, const Player& b){ return a.id<b.id; });
    printf("%d", players[0].rank);
    for (i=1; i<NP; i++)
        printf(" %d", players[i].rank);
    printf("\n");
}
```