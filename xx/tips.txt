思路：对输入排序。

错误：scanf没有用&取地址。

可以考虑在输入时过滤确实不合格的数据项。

不要惧怕每次循环都要O(N)会超时，先把程序跑起来。


输出格式注意，is, are和名词单复数：
```cpp
if (N == 1)
    printf("There is %d account and no account is modified\n", N);
else
    printf("There are %d accounts and no account is modified\n", N);
```


如果name不超过10个字符，那么如果要自己用char[]数组存储的话，记得分派至少11字节内存空间，多一个字节，这样才能存储'\0'。


在循环中频繁刷新缓冲区，如`cout << endl;`，是造成超时的一个重要原因。


```cpp
// 注意如果有一下两种输入的区别，对于"Is PAT&TAP symmetric?"，
// 下面第一种s的值是"Is"，第二种的值是"Is PAT&TAP symmetric?"。
// cin >> s;
getline(cin, s);
```


多个容器，每个容器存放一个类别的数据。


void dfs(int v, int level) {
	visited[v] = true;
	for (int x: m[x]) {
		if (!visited[x])
			// dfs(x, level++); // 错误。
			dfs(x, level+1);
	}
}


```cpp
min_ = INT_MAX;
// do something ...
if (min_ = INT_MAX)
	return;
	
// 最好写成，
if (INT_MAX == min_)
	return
```


把代码从codeblock复制到网页后，记得检查头文件，如codeblock会默认帮你包含<string>, <climits>等。


注意仔细看题，理解题意，不要一上来连题意都不理解就马上码代码。


注意一个点，很容易忽视：
```cpp
#include <iostream>
using namespace std;

int main(int argc, char**argv) {
    int x = 1;
    printf("%f\n", x);
    printf("%f\n", (float)x);

    // 0.000000
    // 1.000000
}
```


注意，不要看到样例输入的是一位数，就可以用`u[1]-'0'`或`u[0]-'0'`这种写法转换成数字，要知道这是样例，测试可能有多位数，所以还是用string存储，然后用string::stoi()进行转换。


bfs, dfs
if (!visited[i] && e[x][i]) { // 注意还要判断有边相连才能将相邻的结点入队。


```cpp
#include <iostream>
#include <string>
using namespace std;

int main(int argc, char**argv) {
    // ./a.out < f
    // f的内容如下：
    // 3
    // abc
    string s;
    int x;
    // cin >> x; // 3
    // scanf("%d", &x); // 3
    scanf("%d\n", &x); // 3 abc
    getline(cin, s);
    cout << x << '\t' << s << endl;
    // 所以就是，记得吃掉换行符。
}
```

有空格/空白符，用getline。

返回值类型不要写错了，是float若写成int，会导致数据失效。

float精度不足也可能导致测试失败，考虑double。

isPrime()，<是错误的，要`<=sqrt`。

```cpp
#include <iostream>
#include <climits>
using namespace std;

int main(int argc, char**argv) {
    int x = INT_MAX, y = INT_MAX;
    long long z;
    z = x+y;
    cout << z << '\n'; // -2
    z = (long long)x+y;
    cout << z << '\n'; // 4294967294
    z = static_cast<long long>(x)+y;
    cout << z << '\n'; // 4294967294
    // 所以，要使运算不溢出，除了用更大的类型存储外，重要的还要告诉编译器做更大类型的运算，否则做的是int类型的运算，还是会溢出。
    // 或者从一开始，就都用比较大的类型存储。
    //
    // 另外还注意，操作数的顺序也有关系：
    double d = 3.14;
    x = 3;
    cout << d*x*y << '\n'; // 2.02293e+10
    cout << x*d*y << '\n'; // 2.02293e+10，前面进行的是浮点型运算，没有溢出，再与另一个整型做浮点型运算，还是没有溢出，因为double能够表示的数的范围比int大很多。
    cout << x*y*d << '\n'; // 6.7431e+09，前面两个整型做整型运算，结果溢出了，然后再与浮点型运算。
}
```


测试过不了，也有可能是类型的大小不足以存储结果，比如两个int/float相乘/相加，可能溢出。


别忘了设置递归终点。

测试算法对边界是否正常工作，最简单的如输入的数据的上界和下界，如-1000, 1000, 0等。


注意不要看到测试样例的数字都是一位数，就用字符来存储，然后`c[i]-'0'`转换为整型，这是不对的，应该用string存储，然后用stoi, stof等，这也才能应对多位数的情况。

没有思路，要不先对输入的非有序序列排一下序试试，再观察一下。


在多次查询中，在某次查询时，即使只接收了一点输入就可以得出结果，也要把剩下的输入接收完，不然下一次查询就会读到上一次查询的未接收的数据。

注意，可能数组越界，应该crash，测试结果却显示结果错误。

要注意输入的图不连通/有多个连通分量的情况。

使用并查集时，写完make_set()，在main()中马上调用，不然很容易忘。

多次查询，记得清空容器以及重新初始化一些变量，避免影响下次查询。

注意关注题目给出的数据的范围，如果数据量比较小，就大胆去写，多层循环也没关系。

为了避免遍历，而需要O(1)/O(logn)存取，则可以用一个数组/map/set。

遍历树的先序序列，相当于先序遍历树。遍历中序序列和后序序列同理，这是一个很重要又容易忽略的想法。

思维惯性，有序 ==》二分查找，N =》logN。

使用并查集时，写完make_set()，在main()中马上调用，不然很容易忘。

一串连续的数字只需要存储起点和长度即可，不需要用容器存储每一个数。

实在没有思路时，尝试暴力破解或枚举，总比空着好。而且题目中给出的数据量不大，就是在提示我们没有思路时试试暴力枚举。

如果只需要哈希，不需要有序，可用unordered_map, unordered_set，而不用map, set。

如果输入string，用cin，不能用scanf()。

抹去低位、留下高位，一般想到除法或右移；抹掉高位、留下低位，一般考虑模运算或左移。

每次都取模，防止溢出，而不是最后才取模，可能中间就溢出了。

没有思路，要不先对输入的非有序序列排一下序试试，再观察一下。

局部变量没有默认初始化，记得显式初始化，特别是计数器一类的变量。

对于多轮查询，即使提前知道了答案，也要把当前的输入读完。

递归中逐步构造序列时，可以用“在相同位置覆盖”代替“插入后删除恢复”，但并非必要，因为vector的push_back()和pop_back()的时间复杂度是O(1)。

递归调用并不是并行执行的，而是串行执行的。

当表格的利用率很低的时候，就没必要提前打表了。

大于其左边所有的元素==大于其左边最大的元素，小于其右边所有的元素==小于其右边最小的元素。

resize()后用[]而不用push_back()。

if(!【这里写入期望为0或false的表达式】)。

bfs时，在结点入队时更新相关数据，和在结点出队时才更新相关数据的区别。

提交前检查：
1. 检查头文件是否包含。
2. 检查变量是否正确声明，类型是否正确，不要期望float而声明为int。
3. 检查打印格式是否符合题意要求，如最少5位数，小数点精确到2位，-1不用补0，尾部不要有空格等。
4. 注意inventory可能是小数，这是因为inventory的单位是千吨，而不是一个月饼！
5. 提交前记得把用来调试的多余的打印语句删掉。


std::map，如果只是想直到某个pair是否存在的话，不能用`map[key]`，因为这样不存在会默认创建。应该用find或count。

双指针，使用同一个数组插入，由于消耗比插入快，所以可以保证不会覆盖未被使用到的信息。

1. 用邻接表存储图时的dfs：
    for (int x: graph[v]) {
        if (!visited[x])
            dfs(x);
    }
2. 用邻接矩阵存储图时的dfs：
	for (int i=1; i<=N; i++) {
		if (!visited[i] && graph[i][v]) // XXX 注意只有相连才继续往下遍历，这点容易忽略。
			dfs(i);
	}
	
有边相连很重要，无边相连的话，逻辑上来说，两个互不相关的顶点，没有任何需要/可以处理的。

用被删除顶点连接的顶点的度是否为1，来判断有几个连通分量是错误的，考虑四个连通分量，它们的大小都大于一个顶点，然后这四个连通分量依赖这个被删除顶点与其它三个连通分量相连的情况。

minNeed是主要标准，minBack是次要标准，当主要标准更新后，次要标准无论是否比之前好，都要更新。

for (int x: pre[v]) { // 递归调用并不是并行展开的，而是串行展开的，一个完全展开后，返回到这里，再展开另一个分支。
	// if (!visited[x])
		dfs(x);
}


不要看到样例输入的是一位数，就可以用`u[1]-'0'`或`u[0]-'0'`这种写法转换成数字，要知道这是样例，测试可能有多位数，所以还是用string存储，然后用string::stoi()进行转换。

printf("G%d\n%.1f %.1f\n", res-N, (float)maxMin_, minSum*1.0/N); // 注意将整型转换为浮点型，还有*1.0做浮点数除法。
如果没有强制转换成浮点型，那么打印的结果就会出错。

注意还要判断有边相连才能将相邻的结点入队。


City citys[200]; // 真正的信息存储。
int edge[200][200];
map<string, int> idx; // 编码时普遍使用下标/索引/指针，这里建立从City对象的name属性到该City对象在数组中的索引/下标/指针的映射。


3. XXX 一个数N的K-P序列可能有多个，题目要求选择其中最大的序列，最大的意思是：sequence {a1, a2, ……, aK} is said to be larger than {b1, b2, ……, bK} if there exists 1≤L≤K such that ai=bi for i<L and aL>bL. 通过dfs是从最大的那个“因子”开始搜索，从而保证我们可以优先选择到一个“因子和”相等的多个序列中最大的那个序列，从而避免下面注释掉的那一大段代码。

不用sqrt(N)，这样会测试不通过。这也告诉我们，如果sqrt(N)不行，试着用N，反正多计算一些也无所谓。

// if (k==K && sum_==N) { // 这个条件设置的不好，这样即使k==K了，如果sum_!=N，也不会终止递归。特别的，没有搞清楚其实`k==K`才是真正的递归终点。

1. 这道题的一个坑点在于，结点数最多200个，但输入的汉密尔顿回路的结点个数，若是合法的回路，则结点数至少为201，不合法的则可能更多，如果用201的数组存储，可能越界，一些数据存储不了。

注意，即使提前就能判断不是汉密尔顿回路，也要接受剩下的输入，不然下一次循环就乱套了。

汉密尔顿回路必须：
……
6. 连接结点的边必须存在。（这个容易忽略）

// 这里有一个情况是输入的图不连通，那肯定不存在欧拉路或欧拉回路。
// 注意，单纯判断是否存在度为0的结点无法判断图是否不连通，因为可能一个图存在两个连通分量，但确实没有度为0的结点，即每个连通分量至少有两个或两个以上互连的结点。
// 判断一个图是否连通，可以用dfs次数，或用并查集查看集合个数/看头目个数。

当反复确定程序逻辑没问题，又找不出原因时，可以检查一下输出语句的格式是否符合题目要求。

visited[v] = true; // 要用visited数组记住哪些已遍历过，避免走回头路。
for (int x: graph[v]) {
	if (!visited[x]) {
		path.push_back(x);
		dfs(x);
		path.pop_back();
	}
}
visited[v] = false;

tolls[0]表示00:00-01:00时段打长途电话的收费，单位是cents/minute。要注意单位，避免算错。

每个人有多条Record，所以可以用map/set/数组按人聚集/分派这些Record。如unordered_map<string, vector<Record*>>，这里key是人名。然后肯定是要有一块内存来存放输入的Record对象/实体的，Record rs[1001]。

做减法，注意到结果可能为负，可能要考虑减数和被减数的大小关系。

O(N)，找到第一个最先可以接受服务的窗口。

记得除以60，将单位转换为分钟。而且n不一定等于N，可能一些客户在17点后才来，这些客户不算。

在输入完一个location的testee后，在接受下一个location的输入前，马上整理这个location的testee的local rank。
再对全部testee按score降序排序，整理出final rank。

多个容器，每个容器存放一个类别的数据，按类聚集。
// 4个类别。
vector<Record> records[4];

1. <cctype>
int isalnum(int c);
int isalpha(int c);
int isdigit(int c);
int isxdigit(int c); // 查看是否为16进制数字字符。
int isascii(int c);

int iscntrl(int c); // 是否是一个控制字符。

int isgraph(int c); // 是否可打印，除了空白符。
int isprint(int c); // 类似isgraph，但包含空白符。
int ispunct(int c);

int isupper(int c);
int islower(int c);

int isblank(int c);
int isspace(int c);

// 转换大小写。
int toupper(int c);
int tolower(int c);

s += tolower(c); // 大小写不敏感，统一转换为小写。

if (a.show != b.show) return a.show > b.show; // XXX 没提交过的和提交没过编译的统统放后面去。这一步是必要的，

看准，case sensitive是大小写敏感，而不是不敏感。

application, 不只是应用的意思，还有申请的意思。applicant则是申请人的意思。

sort(applicants.begin(), applicants.end(), cmp);
for (i=0; i<N; i++) // 注意对象与下标的映射在sort()前和sort()后的区别。
	idx[applicants[i].id] = i;
	
某辆车的停车时间，XXX 注意某辆车可能多次进出，要累加起来。

第一次先按对分类并按时间排序，挑出有效的记录，然后不按对分类了，直接按时间排序。然后遍历处理查询。注意到，由于查询的时间是升序的，所以可以在上一次查询的结果上继续计算。
bool cmp1(const Record& a, const Record& b) {
    // XXX 先分类。
    if (a.plateNO != b.plateNO) return a.plateNO<b.plateNO; // 对id进行分类，使得相同id的记录排在一起。
    // 相同id的记录再按照时间升序排序。
    return a.time < b.time;
}
bool cmp2(const Record& a, const Record& b) {
    return a.time < b.time;
}
sort(valid, valid+nValid, cmp2);
j = cnt = 0;
for (i=0; i<K; i++) {
	scanf("%d:%d:%d", &hh, &mm, &ss);
	time_ = hh*3600+mm*60+ss; // time point, 时间点，想象一条时间轴，上面每个点表示一条记录，该点的时间就是记录中的时间。
	for (; j<nValid && valid[j].time<=time_; j++) { // XXX 从上一次搜索停下来的地方继续搜索。
		if (valid[j].in) cnt++; // 进入停车。
		else cnt--; // 离开。
	}
	printf("%d\n", cnt);
	// cnt不置零。
}

// 一小时有3600秒，除以3600，获得小时数；一分钟有60秒，除以60，得到分钟数，模60，得到去掉小时数剩下的分钟数。
printf("%02d:%02d:%02d\n", maxTime/3600, maxTime/60%60, maxTime%60);

// 去掉客人中结对出现的，这就是为什么要用map而不用vector的原因，因为要快速查找，随机访问。
cnt = M;
for (i=0; i<N; i++) {
	if (a[couples[i].first] && a[couples[i].second]) {
		a[couples[i].first] = a[couples[i].second] = false;
		cnt -= 2;
	}
}

开头可能会有一些比较重要的句子，可能看到后面容易忘，这点要注意。
// to be qualified for a certificate, he/she must first obtain no less than 200 points
// from the online programming assignments, and then receive a final grade no less than 60 out of 100.
像这句话就放在最开头，很容易就忽略了。

for (i=0; i<P; i++) {
	scanf("%s %d", id, &x);
	if (x < 200)
		continue;
	a[n].id = id;
	a[n].Gp = x;
	idx[string(id)] = n;
	n++;
}
for (i=0; i<M; i++) {
	scanf("%s %d", id, &x);
	if (idx[string(id)] == 0)
		continue;
	a[idx[string(id)]].Gmid = x;
}
for (i=0; i<N; i++) {
	scanf("%s %d", id, &x);
	// 这里并没有像第一个循环那样在这里检测期末成绩是否符合标准，不符合则不插入/更新。
	// 因为可能不符合，但这个记录已经在数组中了，删除它会比较麻烦，所以干脆只更新/插入，
	// 等到输出时再排除不符合的结点。（不在排序时，因为这也比较麻烦）
	if (idx[string(id)] == 0)
		continue;
	a[idx[string(id)]].Gfinal = x;
}

如果该物品的不相容列表不为空，则将不相容的物品ID用unordered_map标记一下，之后如果该货物列表出现这些物品（O(logN)），则该货物列表不能打包到一起。

用两个数组来记录每个位置左边P的数量和右边T的数量，在记录时，遍历到的位置为P或者T，其下一个位置的数量就为前一个的数量+1，否则和前一个位置的数量相同。

注意`ans += (p[i]*t[i])%1000000007;`和`ans = (ans+p[i]*t[i])%1000000007;`的区别。

因为无法对set中的元素赋值，所以只好先删除，再插入更新过的对象。

知道s数组，可以O(1)求取a数组的区间和。（s[i]-s[j]）
知道𝑝数组，可以O(𝑛)求出𝑎数组。𝑎𝑖相当于𝑝[1,𝑖]这个前缀和。

我们用数组p表示刚刚的差值，p[i]=a[i]-a[i-1].
那么：区间加[𝑙, 𝑟]，可以化为这两个操作：
p[l]+=k;
p[r+1]-=k;
因此，一次区间加只修改这两个元素；
最后利用p数组求出a数组，即为答案

区间和问题，维护一个前缀和数组s+二分查找即可。

1. 因为根据题目给出的数字范围，最多需要两个逗号，这种是可以枚举的，直接枚举，而不需要模拟从低位到高位每数三个数，插入一个逗号的过程。
2. 格式化字符串，或者将数字转换为有格式的字符串，善用printf, sprintf等函数。


1. 注意找到第一个有效数字的方法，`s.find_first_not_of("0.")`，其中关于find_first_not_of()的行为的描述是：Finds the first character equal to none of characters in str.
2. 注意小数点可能在第一个有效数字前面，也可能在第一个有效数字后面。
3. .002中的0不是有效数字，.303中的0就是有效数字。
4. 格式化的要点是获取尾数（准确是N位有效数字）和获取指数。
6. api：
find
rfind
find_first_of
find_first_not_of
find_last_of
find_last_not_of
它们的参数都是至少接收一个string或一个char，然后有一个可选的pos形参，是下标（不是迭代器），最后一个可选count形参。另外rfind的pos表示从pos开始逆向查找。
if ((pos_dot=s.find('.')) == string::npos)

为什么选择找能work的键而不是找stucked的键呢？因为我们无法区分，"eee"，到底是故意重复了K次，还是e键是坏的，但只要有一次出现不足K次，那么这个键一定是好的。
这里记得跳过"eee"，否则下一个循环看到"ee"，导致将e认为是能work的键。

for (i=0; i<K; i++) {
	scanf("%d", &v[i]);
	if (v[i] < 0)
		nNegative++; // 接受输入时统计。
}
if (nNegative == K) {
	printf("0 %d %d\n", v.front(), v.back());
	return 0;
}

贪心：以当前汽车所在的加油站的油价A为标准，考察汽车加满油能到达的最大距离的范围内，有无比A更低的加油站，如果有则在当前加油站加到刚好能到达那个加油站的油，去到那个加油站。如果没有比A更低的加油站，则在当前加油站加满油，去到最低的那个加油站。
注意减掉leftdis，先把汽车剩的油用光。

nowdis = sta[i].dis; // 注意对nowdis的赋值，表示车会到下一个加油站。 

for (; start<L && a[start]!=favoriteColor[color]; start++) // 如果我们提前对数据作过滤的话，就不需要这个跳过不合格元素的步骤了。
        ;
		

不下降子序列：
for (i=0; i<num; i++) {
	dp[i] = 1;
	for (j=0; j<i; j++) {
		if (a[i] >= a[j]) // 首先是不下降，
			dp[i] = max(dp[i], dp[j]+1); // 然后是询问a[i]跟在a[j]后面是否可以构成更长的不下降子序列。（更，当然是和原本的自己相比较，即和dp[i]相比较。）
	}
	max_ = max(dp[i], max_);
}

换一个角度，是什么反映了喜欢的颜色的顺序？是该颜色在喜欢颜色数组中的下标，较小先出现，较大后出现。如果我们把颜色数组存储为下标数组，那么问题就转变为寻找最长不下降子序列。

// 可认为硬币的重量与价值相等，所以dp[N][M]最多等于M，如果价值与重量不相等，那么dp[N][M]才可能大于M。
// 把硬币的重量与价值看作相等，是这道题比较难的一个点。

// 单位是百万元，所以可以是浮点数。
// 每千吨的价格，所以也可以是浮点数。

p[j] += x; // +=，自动合并输入中多个指数相同的项。

如果累加后，系数为0，要更新项数。

left = minRadix(N); // 输入A的最小进制必定为其最大的位数加1，否则就无法表示输入A。
right = n + 1; // 输入A的最大进制可以是n+1，表示输入A是“一位数”，这一位数与输入B相等。
r = binarySearch(N, left, right, n);

// midNum = stoll(s, 0, mid); // 用标准库的stoll，当溢出时会抛出异常。
// 关键：注意`midNum<0`，这时就要减小二分查找的上界了。溢出了？
if (midNum < 0 || midNum > target) right = mid - 1;

判断回文数：
2. 可以反转字符串/将反转后的digit存到vector中，循环，看两半是否相等。
3. 也可以反转到一个数字中去，然后比较两个数是否相等。但是**可能反转后会溢出**，所以尽可能还是采用上面的方法。

如果数字用string存储，那么我们可以用std::reverse很容易得到该数字的逆。

记得处理最高位的进位。

先组装出一个空白字符串，这样后面可以直接打印，而不必每次都循环打印空格。
for (i=0; i<n2-2; i++) {
	space += ' ';
}

// n1 = n3 = max{k | k<=n2 for all 3<=n2<=N} with n1+n2+n3-2=N，减2是横竖交点重叠了。
for (n2=3; n2<=N; n2++) {

// while (result.size()!=0 && result[0]=='0') // 跳过前导零。可能不止一个零，所以要用循环。
//    result.erase(result.begin()); // 用erase()删除指定位置的元素。
if ((i=result.find_first_not_of("0")) != 0) {
	result.erase(0, i);
}

now = n / a % 10，若a为10，那么n/a能够得到n十位以上的数字，然后%10，得到十位上的数字。也就是除法得到高位，模运算得到低位。

int getFactor(int N) {
    int remain=N, count=0;
    int sqrt_ = sqrt(N*1.0);
    for (int i=0; i<np && prime[i]<=sqrt_; i++) {
        if (remain%prime[i] != 0) continue;
        fac[count].factor = prime[i];
        while (remain%prime[i] == 0) {
            fac[count].exponent++;
            remain /= prime[i]; // 除法使得remain不会为0。
        }
        count++;
        if (remain == 1) break;
    }

	// 注意处理常系数。
    if (remain > 1) {
        fac[count].factor = remain;
        fac[count++].exponent = 1;
    }
    return count;
}

先让Nt为其中一个setA的大小，Nc为0，然后遍历另一个setB，出现setA中没有的元素，则`Nt++`，否则`Nc++`。

给出三个64bit的有符号数A, B, C，看是否`A+B>C`。
r = a+b;
if (a>0 && b>0 && a+b<0) // 同号且溢出，真实结果是正数，肯定比64位有符号数C大。
	printf("Case #%d: true\n", i);
else if (a<0 && b<0 && a+b>=0) // 同号且溢出，真实结果是很小的负数，肯定比C小。
	printf("Case #%d: false\n", i);
else if (a+b > c) // 同号不溢出或异号不溢出。
	printf("Case #%d: true\n", i);
else
	printf("Case #%d: false\n", i);
	
long int g = gcd(abs(a.numerator), abs(a.denominator));
if (a.denominator < 0) g = -g;
// 让g和d的符号相同，这样下面的除法就会把d的负号转移给n，如果有的话。
a.numerator /= g;
a.denominator /= g;

遇到公式不要慌，好好分析一下有几个变量，确定一个，另外那些是否能确定。

// 只需枚举左端点即可，每个因子使用一次，如果不连续了，枚举下一个左端点。


struct BigInt {
    int digits[1010]; // 最多一千位，但相加最高位可能进位，故要分配多一些。
    int nDigits;
    BigInt(int n): nDigits(n) {}
    BigInt(const string& num): nDigits(num.size()) {
        for (int i=nDigits-1, j=0; i>=0; i--, j++) // 注意这个存储方式，这方便了我们对大整数进行运算，如最高位有进位直接写入下一个slot，而不必移动低位的那些元素。
            digits[j] = num[i]-'0';
    }
};
// 大整数相加。
BigInt add(BigInt& x) {
    BigInt y(x.nDigits);
    BigInt z(x.nDigits);
    for (int i=0, j=x.nDigits-1; i<x.nDigits; i++, j--) {
        y.digits[i] = x.digits[j];
    }
    int carry = 0, i;
    for (i=0; i<x.nDigits; i++) {
        z.digits[i] = x.digits[i]+y.digits[i]+carry;
        if (z.digits[i] > 9) {
            z.digits[i] -= 10;
            carry = 1;
        } else {
            carry = 0;
        }
    }
    // 处理最高位的进位。
    if (carry) {
        z.digits[i] = 1;
        z.nDigits++;
    }
	
DFS的结构是处理当前结点，递归处理与当前结点“相连”的结点

树的先序、中序、后序都是DFS的一种形式

n0 = n2 + 1。

推导二叉树的一个性质n0 = n2 + 1。
有n个结点的树，有n-1条边，因为除根以外，每个结点都有一条边指向该结点。
故有n-1=2*n2+n1。
联立n=n2+n1+n0，可得。

给定结点数为N的AVL树的最大高度/层数为O(log2N)。O里面的函数log2N是上界。
如6个结点，最大高度3层，21个结点，最大高度为5层。

BST->Left = Delete(BST->Left, X); // XXX 因为可能改变BST->Left指向另一个结点，所以要对BST->Left重新赋值，这样才能将两个结点连接起来。
插入也是，还有AVL树的插入操作也是，赋值这一点比较容易忘。

BST = BST->Right; // BST指针指向其右子结点。

// 多轮查询，即使提前知道了答案，也要把当前的输入读完。
for (; i<N; i++)
	scanf("%d", &v);
		
root->left = insertNode(root->left, key); // 注意这里别忘了接收返回值更新root->left，说不定插入后调整平衡后，左子树的根变了呢。
root = insertNode(root, x);

哈夫曼树没有度为1的结点。
n0 = n2 + 1;
n = n0 + n2;

3. 堆插入的步骤为将元素插入最后，然后上滤到合适位置。
4. 堆建立可以调用插入操作，时间复杂度O(NlogN)。
5. 或者先将输入序列放好，然后从最后一个父结点开始，下滤到合适的位置。这样逐步使每一个小的子堆满足最大/最小堆的性质。这个方法是线性时间复杂度。

heapSize--; // 删除堆最底下的那个结点A。

TreeNode* createHuffmanTree() {
    TreeNode* t;
    // 哈夫曼树没有度为1的结点，叶子一定是成对出现的。
    while (heapSize > 1) {
        // 哈夫曼树的建立过程就是每次选择最小的两个子树合并。
        t = new TreeNode(); // 下面这部分可以放在构造函数中。
        t->left = deleteMin();
        t->right = deleteMin();
        t->weight = t->left->weight + t->right->weight;
        insert(t);
    }
    return deleteMin();
}

priority_queue<TreeNode*, vector<TreeNode*>, decltype(cmp)> q(cmp);

用一维数组压缩存储无向图的邻接矩阵，那么第ij个顶点的下标是i*(i-1)/2 + j，ij均从0开始。（三角形面积加j）

diameter，直径，radius，半径。

void folyd() {
    int i, j, k;
    for (i=1; i<=N; i++) {
        for (j=1; j<=N; j++) {
            if (graph[i][j] != 0)
                D[i][j] = graph[i][j];
            else
                D[i][j] = INT_MAX/2; // XXX 不能用INT_MAX，否则下面相加会溢出，从而错误地满足条件。
        }
    }
    // 从D^1到D^N，遍历每一个中继点k。
    // 状态转移方程：D[i][j] = min(D[i][k]+D[k][j], D[i][j])。
    for (k=1; k<=N; k++) {
        for (i=1; i<=N; i++) {
            for (j=1; j<=N; j++) {
                if (D[i][k]+D[k][j] < D[i][j]) {
                    D[i][j] = D[i][k]+D[k][j];
                }
            }
        }
    }
}

void bfs() {
    int i, v;
    queue<int> q;
	// 可能有多个起点，扫描一遍，把这些起点都入队。
    for (i=1; i<=N; i++) {
        if (firstReachable(i)) {
            q.push(i);
            visited[i] = true; // 一定要在push()时更新visited，不能在pop()时更新，否则会推入已推入过的顶点。
            pre[i] = 0;
        }
    }
    while (!q.empty()) {
        v = q.front();
        q.pop();
        if (abs(vertexes[v].first)+D>=50 || abs(vertexes[v].second)+D>=50) {
            bestDst = v;
            return;
        }
        for (i=1; i<=N; i++) {
            if (!visited[i] && reachable(v, i)) {
                q.push(i);
                visited[i] = true;
                pre[i] = v; // 记录前驱顶点，以便回溯出完整路径。
            }
        }
    }
}

// XXX If there are many shortest paths, just output the one with the minimum first jump, which is guaranteed to be unique. 所以先对输入序列排序，再BFS/DFS。
sort(vertexes.begin()+1, vertexes.end(), cmp);
	
主要的权相等，次要的权更小，才更小次要的权，否则不需要做什么。千万不要看到主要的权相等，就不管三七二十一更新次要的权。

```
其他类似问题
 要求数最短路径有多少条
 count[s] = 1;
 如果找到更短路：count[W]=count[V];
 如果找到等长路：count[W]+=count[V];
 要求边数最少的最短路
 count[s] = 0;
 如果找到更短路：count[W]=count[V]+1;
 如果找到等长路：count[W]=count[V]+1;
```

1. 最小生成树，可用prim算法或kruskal算法。
2. prim算法和dijkstra算法很像，但要注意区别，前者的`dist[i]`表示未在MST中的顶点i到MST（中的顶点）的最小距离，后者的`dist[i]`表示从原点v到vi的最短路径。所以更新这些数据结构时也有区别。

bool topSort() {
    int i, v, cnt=0;
    queue<int> q;
    // XXX 把所有入度为0的顶点入队。不要下意识地以为入度为0的顶点只有一个。
    for (i=0; i<N; i++) {
        if (indegree[i] == 0) {
            q.push(i);
            earliest[i] = 0;
        }
    }
    while (!q.empty()) {
        v = q.front();
        q.pop();
        cnt++;
		// 处理邻接的边/活动。
        for (const auto& p: graph[v]) {
            earliest[p.first] = max(earliest[p.first], earliest[v]+p.second);
            indegree[p.first]--; // 删去这条边。
            if (indegree[p.first] == 0) { // 没有边指向顶点p.first时，该顶点的最早完成时间才确定，才将该顶点入队。
                q.push(p.first);
            }
        }
    }
    return cnt==N; // 通过这一个判断可以判断该图是否是有向无环图。
}

// 有多个起点，并不意味着有多个连通分量。

void heapSort(vector<int>& nums) {
    // 完全二叉树用数组存储，从1开始存储，不然2*i会失效，虽然也可以用2*i+1, 2*i+2，但不直观，且求父结点时，i/2更符合二进制的特点。
    // 线性时间复杂度建立堆，从最后一个父结点开始，逐步将每个子堆调整为最小堆。
    int i;
    for (i=N/2; i>0; i--)
        percDown(i, nums, N);

    for (i=N; i>1;) {
        // 注意用循环变量i表示堆的大小的变化。
        swap(nums[1], nums[i--]); // 每次将最大的元素/堆顶交换到后面去。
        percDown(1, nums, i); // XXX 注意这里的i已经递减过了，把刚刚交换出去的最大的元素从堆中删除。
    }
}

// 下面这个双指针的用法值得学习。
int partition(vector<int>& nums, int left, int right) {
    int pivot = nums[right];
    int i=left-1, j=left;
    for (; j<right; j++) {
        if (nums[j] <= pivot) {
			// i+1指向>pivot的元素，j指向<=pivot的元素。
            swap(nums[++i], nums[j]);
        }
    }
    swap(nums[right], nums[++i]); // 将主元交换到中间。
    return i;
}

A={1, 4, 5, 2, 9, 7}，我想知道元素9的下标，一种方法是遍历，另一种方法是维护一个数组/map, T，其中T[A[i]]=i，那么T[9]就是元素9在A数组中的下标了。

当元素之间有明确的先后关系的时候（也许可以构成DAG），可以考虑是否跟拓扑排序有关，用拓扑排序来生成序列。

哈希：
// pos = h+i; // 错误。
// pos = h+i%N; // 错误。
pos = (h+i)%N;

```cpp
// A negative integer represents an empty cell in the hash table.
// 所以不要以为测试样例给出-1，就认定-1表示空位，其实是负数表示空位。
// if (table[i] != -1)
if (table[i] >= 0)
```

// unordered_map<int, bool> isLeaves, level_, parent, leftChild, rightChild; // 错误，不小心就会这么写，实际上它们被期望不全是unordered_map<int, bool>。
unordered_map<int, bool> isLeaves;
unordered_map<int, int> level_, parent, leftChild, rightChild;

第二个剪支是最关键的，如果后面剩余的位数全部取9，位数和都无法大于等于m，那么这一分支就可以直接剪掉。

while (p != -1) { // 注意这里不是`while (p)`，在这道题中，0不表示空指针。

// 没有边指向结点i，故结点i是根。

if (!visited[j] && edge[v][j]) { // 不在已确定最短路径集合中，且有边相连。

调整运算次序，有效防止溢出。
x*x<y => x<y/x
(x+y)/2 => x+(y-x)/2