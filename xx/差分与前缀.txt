## 1044 Shopping in Mars (25 分)

1. 连续子序列和等于某个数的问题，即区间和问题，维护一个前缀和数组s+二分查找即可。（类似的数组有一阶差分数组p）
2. 知道s数组，可以O(1)求取a数组的区间和。（s[i]-s[j]）

```cpp
#include <iostream>
#include <vector>
#include <climits>
using namespace std;

vector<int> v, s;

int N, M;

// 找到v中第一个大于等于x的元素的下标。
int lower_bound(int left, int right, int x) {
    int mid; // [left, right)
    while (left < right) {
        mid = (left+right)/2;
        if (s[mid] >= x) {
            right = mid; // 用right暂存符合条件的元素的下标，然后缩小范围，找到第一个。
        } else {
            left = mid+1;
        }
    }
    return right;
}

int main() {
    int i, j;
    scanf("%d %d", &N, &M);
    v.resize(1+N); // 从1开始存储。
    s.resize(1+N); // s[i]表示v[1, i]的和。
    s[0] = 0;
    for (i=1; i<=N; i++) {
        scanf("%d", &v[i]);
        s[i] = s[i-1] + v[i];
    }
    // 遍历左端点。
    int min_ = INT_MAX;
    bool flag = false;
    for (i=0; i<=N; i++) {
        j = lower_bound(i, N+1, s[i]+M); // 知道前缀和数组s，可O(1)得到区间和，并且注意到，前缀和数组就是一个有序的上升序列，思维惯性：有序 => 二分查找，O(N) => O(logN)。
        if (s[j]-s[i] == M) {
            flag = true;
            printf("%d-%d\n", i+1, j);
        } else if (s[j]-s[i]>M && s[j]-s[i] < min_) {
            min_ = s[j]-s[i];
        }
    }
    if (!flag) {
        for (i=0; i<=N; i++) {
            j = lower_bound(i, N+1, s[i]+min_);
            if (s[j]-s[i] == min_) {
                printf("%d-%d\n", i+1, j);
            }
        }
    }
}
```


## 1046 Shortest Distance (20 分)

1. 知道s数组，可以O(1)求取a数组的区间和。（s[i]-s[j]）

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

int N, M, a, b;

int d[100001];

int s[100001]; // s[i]表示输入序列[1, i]的和，s[N]就是整个序列的和了。

int main() {
    scanf("%d", &N);
    int i, x;
    for (i=1; i<=N; i++) {
        scanf("%d", &x);
        s[i] = s[i-1] + x;
    }
    scanf("%d", &M);
    for (i=0; i<M; i++) {
        scanf("%d %d", &a, &b); // 查询。
        if (b > a)
            x = s[b-1]-s[a-1];
        else
            x = s[a-1]-s[b-1];
        printf("%d\n", min(x, s[N]-x)); // 取两部分中最小的那部分。
    }
}
```