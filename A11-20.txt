## 1011 World Cup Betting (20 分)

```cpp
#include <cstdio>
using namespace std;

char results[3] = {'W', 'T', 'L'};
char buy[3];
float odds[3];
float maxOdds[3];

int main() {
    int i, j;
    for (i=0; i<3; i++) {
        scanf("%f %f %f", &odds[0], &odds[1], &odds[2]);
        for (j=0; j<3; j++) {
            if (odds[j] > maxOdds[i]) {
                maxOdds[i] = odds[j];
                buy[i] = results[j];
            }
        }
    }
    printf("%c %c %c %.2f\n", buy[0], buy[1], buy[2], (maxOdds[0]*maxOdds[1]*maxOdds[2]*0.65-1)*2);

}
```


## 1012 The Best Rank (25 分)

1. std::sort。
2. 输入数据的存储组织方式。
3. 随机存取。
4. 四舍五入。

通过对给出的样例输入求平均值，知道对平均值采用四舍五入。

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

struct Student {
    int id;
    int grade[4];
};

// 输入的Student对象顺序存储。
Student ss[2001];
char repr[4] = {'A', 'C', 'M', 'E'};
// 关键：以id作为索引来获取随机存取，即O(1)存取是比较重要的，否则在响应M个查询请求时，每一个都需要遍历一次，会导致O(n^2)。
int Rank[1000000][4]; // id是6位数，或者也可以考虑用std::map。

int main() {
    int N, M, i, j, toCheck, x;
    char y;
    cin >> N >> M;
    for (i=0; i<N; i++) {
        // 注意ss.grade四个slot的组织方式，按照优先级'A'>'C'>'M'>'E'的方式来安排存储。
        cin >> ss[i].id >> ss[i].grade[1] >> ss[i].grade[2] >> ss[i].grade[3];
        // 注意除以3.0，做浮点数除法。
        ss[i].grade[0] = (int)((ss[i].grade[1]+ss[i].grade[2]+ss[i].grade[3]+0.5)/3.0);
    }
    for (i=0; i<4; i++) {
        sort(ss, ss+N, [i](const Student &s1, const Student &s2){ return s1.grade[i] > s2.grade[i]; });
        Rank[ss[0].id][i] = 1;
        for (j=1; j<N; j++) {
            if (ss[j].grade[i] == ss[j-1].grade[i])
                Rank[ss[j].id][i] = Rank[ss[j-1].id][i];
            else
                Rank[ss[j].id][i] = j+1; // 比如有3个并列第一，则第4个是第4名，而不是第2名。
        }
    }
    for (i=0; i<M; i++) {
        cin >> toCheck;
        if (Rank[toCheck][0] == 0) {
            cout << "N/A" << endl;
        } else {
            /*
            x = 1000;
            for (j=0; j<4; j++) {
                if (Rank[toCheck][j] < x) {
                    y = repr[j];
                    x = Rank[toCheck][j];
                }
            }
            cout << x << ' ' << y << endl;
            */
            // 其实观察上面的循环中的更新x, y的语句，它只依赖于变量j，所以我们只需要循环记录那个洽淡的j即可。
            int k=0;
            for (j=1; j<4; j++) {
                if (Rank[toCheck][j] < Rank[toCheck][k])
                    k = j;
            }
            cout << Rank[toCheck][k] << ' ' << repr[k] << endl;
        }
    }
}
```


## 1013 Battle Over Cities (25 分)

1. 从一个连通图删除一个点会产生一个或多个连通子图。
2. 通过图的遍历判断连通子图个数。
3. 用scanf和printf代替cin和cout，前者速度快得多。
4. 由于存在较多的读取操作，插入和删除操作几乎没有，所以要用邻接矩阵存储图，从而能够随机存取，复杂度O(1)。
5. 使用bfs的一个好处是，不必像dfs那样频繁进行函数调用。

题目大意是，给出一个无向连通图，删除某一点，问需要加上几条边才能使剩下的点再次构成一个无向连通图。转换一下，其实就是问删除某一点后，产生的连通子图个数，这可以通过利用图的遍历（bfs或dfs）一次只能遍历一个连通分量的特点来得到连通子图个数。然后连接n各连通子图，需要至少n-1条边。

注意结点编号从1开始。

```cpp
#include <iostream>
#include <queue>
using namespace std;

// 邻接矩阵，边不带权，所以用bool不用int。
// 注意结点编号从1开始。
bool graph[1001][1001];
bool visited[1001];

void bfs(int node, int deleted, int N) {
    queue<int> q;
    int i, x;
    q.push(node);
    visited[node] = true;
    while (!q.empty()) {
        x = q.front();
        q.pop();
        // 将x的未访问的邻接点加入队列。
        for (i=1; i<=N; i++) {
            // 注意，条件`i!=deleted`，假装不存在到已删除结点deleted的路径。
            // 注意到其中`i!=x`的条件是多余的，因为它起到的作用被`!visited[i]`包含。
            if (i!=x && i!=deleted && !visited[i] && graph[x][i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

int main() {
    // N个结点，M条边，测试K次，每次删除一个结点。
    int N, M, K, i, j, k, deleted;
    // cin >> N >> M >> K;
    scanf("%d %d %d", &N, &M, &K);
    for (i=0; i<M; i++) {
        // cin >> j >> k;
        scanf("%d %d", &j, &k);
        // 注意是无向图
        graph[j][k] = true;
        graph[k][j] = true;
    }
    for (i=0; i<K; i++) {
        // cin >> deleted;
        scanf("%d", &deleted);
        // 删除边
        // XXX 事实上**不必真的删除**，只需在遍历时**假装**不存在到已删除结点deleted的路径即可。
        // 如果不做这个优化，就会超时，但有一个测试还是接近超时。这时就要用scanf和printf代替cin和cout。
        for (j=1; j<=N; j++) {
            /*
            graph[deleted][j] = false;
            graph[j][deleted] = false;
            */
            visited[j] = false;
        }
        visited[deleted] = true;
        // 图的遍历
        for (k=0, j=1; j<=N; j++) {
            if (!visited[j]) {
                bfs(j, deleted, N);
                k++;
            }
        }
        // 还原，避免对下次测试造成影响
        /*
        for (j=1; j<=N; j++) {
            graph[deleted][j] = true;
            graph[j][deleted] = true;
        }
        */
        // 连接k各连通子图至少需要k-1条边。
        // cout << k-1 << endl;
        printf("%d\n", k-1);
    }
}
```


## 1014 Waiting in Line (30 分)

1. 模拟题。
2. 注意题目给出的敏感数据，如N*M。
3. 组织结构体。

```cpp
#include <iostream>
#include <queue>
using namespace std;

struct Window {
    int time_; // 该窗口可接待客户的时刻，单位是分钟。
    queue<int> q_;
    Window(): time_(8*60) {}
};

struct Customer {
    int start_; // 开始处理的时刻。
    int end_; // 处理完的时刻。
    int takes_; // 窗口处理该客户的业务所需时间。
    // Customer(int t): takes_(t) {}
    Customer() = default;
};

// The customers are numbered from 1 to K.
// .bs节，默认初始化，类类型的默认初始化是调用默认ctor。
Customer cus[1001];
Window win[20];

int main() {
    // N个窗口，黄线内一个窗口前可排M个客户，总共会有K个客户，有Q个查询，查询某个客户的事务在何时处理完。
    int N, M, K, Q, i, j, k, x, y;
    scanf("%d %d %d %d", &N, &M, &K, &Q);
    for (i=1; i<=K; i++) {
        scanf("%d", &cus[i].takes_);
    }
    // 前M*N个客户直接入队，它们直接会进入最短的队列。
    // 注意客户数K可能小于M*N。
    for (i=1, j=0; i<=M*N && i<=K; i++, j=(j+1)%N) {
        cus[i].start_ = win[j].time_;
        cus[i].end_ = cus[i].start_ + cus[i].takes_;
        win[j].time_ = cus[i].end_;
        win[j].q_.push(i);
    }
    // 后面的客户进入最早有空的队列，这只看每个窗口第一个正在处理的客户的结束时间。
    for (; i<=K; i++) {
        y = 0x6fffffff;
        for (j=0; j<N; j++) {
            x = win[j].q_.front();
            if (cus[x].end_ < y) {
                k = j;
                y = cus[x].end_;
            }
        }
        cus[i].start_ = win[k].time_;
        cus[i].end_ = cus[i].start_ + cus[i].takes_;
        win[k].time_ = cus[i].end_;
        win[k].q_.pop();
        win[k].q_.push(i);
    }
    // N个队列中的元素丢掉即可，因为我们已经在push时处理得到想要的信息了。
    for (i=0; i<Q; i++) {
        scanf("%d", &x);
        // for those customers who cannot be served before 17:00, you must output Sorry instead.
        // 注意理解语义。
        // if (cus[x].end_ >= 17*60) {
        if (cus[x].start_ >= 17*60) {
            printf("Sorry\n");
        } else {
            printf("%02d:%02d\n", cus[x].end_/60, cus[x].end_%60);
        }
    }
}
```

参考：https://blog.csdn.net/acm_ted/article/details/20473255


## 1015 Reversible Primes (20 分)

1. 质数判断。

23转换为2进制为10111，其逆是11101，即29，也是质数。

```cpp
#include <iostream>
#include <cmath>
using namespace std;

bool isPrime(int n){
    if(n <= 1)
        return false;
    int x = (int)sqrt(1.0 * n);
    for(int i=2; i<=x; i++) {
        if(n % i == 0)
            return false;
    }
    return true;
}

int main() {
    int x, y, radix;
    while (true) {
        scanf("%d", &x);
        if (x < 0)
            break;
        scanf("%d", &radix);
        if (!isPrime(x))
            printf("No\n");
        else {
            y = 0;
            while (x) {
                y = y*radix + x%radix;
                x /= radix;
            }
            if (isPrime(y))
                printf("Yes\n");
            else
                printf("No\n");
        }
    }
}
```


## 1016 Phone Bills (25 分)

1. 先对无序的输入应用std::sort。
2. 选择好数据结构。
3. 用std::map按类聚集。
4. 不要先考虑优化，先正确解决问题再说。
5. 打印时，头和尾是总是打印还是有条件地打印？
6. 计算时间的差的算法。

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <string>
using namespace std;

// tolls[0]表示00:00-01:00时段打长途电话的收费，单位是cents/minute。
int tolls[24];

struct Timestamp {
    int hour;
    int minute;
};

struct Pair {
    int day; // 一对配对的on_line和off_line记录发生在同一天。
    int n;
    Timestamp on_line;
    Timestamp off_line;
    Pair(int d): day(d), n(1) {}
};

// name <--> on_line off_line pair
map<string, vector<Pair>> m;

void calc(const Timestamp &on_line, const Timestamp &off_line, int &elapsed, float &charge) {
    float c = 0;
    int h = 0;
    int i;
    for (i=on_line.hour+1; i<off_line.hour; i++) {
        c += tolls[i] * 60;
        h++;
    }
    c += (60-on_line.minute)*tolls[on_line.hour];
    c += off_line.minute*tolls[off_line.hour];
    charge = c/100;
    elapsed = h*60 + (60-on_line.minute) + off_line.minute;
}

// You may assume that no two records for the same customer have the same time. 

int main() {
    int N, i, x, month, day, hour, minute;
    char s[10];
    string name;
    name.resize(20); // 预先分配空间。
    bool flag, on;
    int elapsed;
    float charge, totalCharge;
    for (i=0; i<24; i++) {
        scanf("%d", &tolls[i]);
    }
    scanf("%d", &N);
    for (i=0; i<N; i++) {
        scanf("%s %d:%d:%d:%d %s", &name[0], &month, &day, &hour, &minute, s);
        if (m.find(name) == m.end()) {
            m[name] = vector<Pair>();
        }
        flag = false;
        // 尝试将该on_line或off_line记录插入现有的pair中。
        on = (s[0]=='o' && s[1]=='n');
        for (Pair &p: m[name]) {
            if (p.day == day) {
                if (on) {
                    p.on_line.hour = hour;
                    p.on_line.minute = minute;
                } else {
                    p.off_line.hour = hour;
                    p.off_line.minute = minute;
                }
                p.n++;
                flag = true;
                break;
            }
        }
        // 尝试插入现有pair失败，为该on_line或off_line记录创建新的pair。
        if (!flag) {
            Pair p(day);
            if (on) {
                p.on_line.hour = hour;
                p.on_line.minute = minute;
            } else {
                p.off_line.hour = hour;
                p.off_line.minute = minute;
            }
            m[name].push_back(p);
        }
    }
    for (auto &it: m) {
        printf("%s %02d\n", it.first.c_str(), month);
        totalCharge = 0;
        for (Pair &p: it.second) {
            if (p.n != 2)
                continue;
            calc(p.on_line, p.off_line, elapsed, charge);
            printf("%02d:%02d:%02d %02d:%02d:%02d %d $%.2f\n", p.day, p.on_line.hour, p.on_line.minute,
                    p.day, p.off_line.hour, p.off_line.minute, elapsed, charge);
            totalCharge += charge;
        }
        printf("Total amount: $%0.2f\n", totalCharge);
    }
}
```

上面的代码面向人物，而不是面向输入的一条条记录。

如果输入的记录是按时间有序输入的话，这样的代码是可以工作的，但问题就是输入并非按时间有序的。

aaa 01:01:01:03 on-line
aaa 01:02:00:01 on-line
CYLL 01:28:15:41 on-line
aaa 01:05:02:24 on-line
aaa 01:04:23:59 off-line

要正确解决，一个简单的方法是面向记录，一边将所有记录存储下来，一边按类，如姓名聚集起来，然后排序。

一开始选择面向人物的数据结构时，主要是想忽略输入记录中的一些冗余信息，节省内存。再次记住，不要先考虑优化，先正确解决问题再说。

```cpp
#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
using namespace std;

// tolls[0]表示00:00-01:00时段打长途电话的收费，单位是cents/minute。
int tolls[24];

struct Record {
    string name;
    int month, day, hour, minute;
    bool on_line;
    int timestamp; // 单位是分钟。
    Record() {
        name.resize(20); // 预先分配空间。
    }
};

// XXX 按类聚集。
// map是key有序的。
map<string, vector<Record*>> m1;

// XXX 存放输入。
Record rs[1001];

// https://blog.csdn.net/qq_38293932/article/details/88585312
void pay(int d1, int h1, int m1, int d2, int h2, int m2, int &elapsed, float &charge)  //计算价格函数
{
    int time = 0;
    double money = 0;
    while (d1 != d2 || h1 != h2 || m1 != m2) {
        time++;
        m1++;
        money += tolls[h1];
        if (m1 == 60) {
            m1 = 0;
            h1++;
        }
        if (h1 == 24) {
            h1 = 0;
            d1++;
        }
    }
    elapsed = time;
    charge = money/100;
    // printf("%d $%.2f\n", time, money / 100);
}

void calc(const Record &on_line, const Record &off_line, int &elapsed, float &charge) {
    pay(on_line.day, on_line.hour, on_line.minute, off_line.day, off_line.hour, off_line.minute, elapsed, charge);
    // 下面这个算法还是复杂了点。。。，遇到某些情况还是会出错。
    /*
    float c = 0;
    int h = 0;
    int i, j;
    // 如果day不同，将on_line的day“推进”到off_line的day相邻。
    for (i=on_line.day+1; i<off_line.day; i++) {
        for (j=0; j<24; j++)
            c += tolls[j]*60;
        h += 24*60; // 编译器会帮我们优化成乘一个数，即会帮我们先算出24*60，而不必在运行时计算。
    }
    // XXX 注意小时时间戳在同一天内和不同天内的处理是不一样的。
    if (on_line.day == off_line.day) {
        // 如果hour不同，将on_line的hour“推进”到off_line的hour相邻。
        for (i=on_line.hour+1; i<off_line.hour; i++) {
            c += tolls[i]*60;
            h += 60;
        }
    } else {
        // 如果hour不同，将on_line的hour“推进”到off_line的hour相邻。
        for (i=on_line.hour+1; i<24; i++) {
            c += tolls[i]*60;
            h += 60;
        }
        for (i=0; i<off_line.hour; i++) {
            c += tolls[i]*60;
            h += 60;
        }
    }
    // XXX 注意分钟时间戳在同一小时内和不同小时内的处理是不一样的。
    if (on_line.hour == off_line.hour) {
        c += (off_line.minute-on_line.minute)*tolls[on_line.hour];
        elapsed = h+(off_line.minute-on_line.minute);
    } else {
        c += (60-on_line.minute)*tolls[on_line.hour];
        c += off_line.minute*tolls[off_line.hour];
        elapsed = h+(60-on_line.minute)+off_line.minute;
    }
    charge = c/100; // 将美分转换为美元。
    */
}


// You may assume that no two records for the same customer have the same time. 

int main() {
    int N, i, month, j, flag;
    char s[10];
    int elapsed;
    float charge, totalCharge;
    for (i=0; i<24; i++) {
        scanf("%d", &tolls[i]);
    }
    scanf("%d", &N);
    for (i=0; i<N; i++) {
        scanf("%s %d:%d:%d:%d %s", &rs[i].name[0], &rs[i].month, &rs[i].day, &rs[i].hour, &rs[i].minute, s);
        rs[i].on_line = (s[0]=='o' && s[1]=='n');
        // For each test case, all dates will be within a single month. 
        rs[i].timestamp = rs[i].day*24*60 + rs[i].hour*60 + rs[i].minute; // 因为一个测试中输入记录的月份是相同的，所以不计入月份。
        if (i == 0)
            month = rs[i].month;
        m1[rs[i].name].push_back(&rs[i]); // XXX 聚集
    }
    // 对每个人，按照时间戳升序record。
    for (auto &it: m1) {
        auto &v = it.second;
        sort(v.begin(), v.end(), [](const Record *r1, const Record *r2){ return r1->timestamp<r2->timestamp; });
        j = v.size();
        totalCharge = 0;
        flag = false;
        for (i=0; i<j; i++) {
            if (v[i]->on_line && i+1<j && !v[i+1]->on_line) {
                // XXX 注意，如果一个人没有合法的记录，就不打印下面的这一句。
                if (!flag) {
                    printf("%s %02d\n", it.first.c_str(), month);
                    flag = true;
                }
                calc(*v[i], *v[i+1], elapsed, charge);
                printf("%02d:%02d:%02d %02d:%02d:%02d %d $%.2f\n", v[i]->day, v[i]->hour, v[i]->minute,
                        v[i+1]->day, v[i+1]->hour, v[i+1]->minute, elapsed, charge);
                totalCharge += charge;
                i++;
            }
        }
        // XXX 注意如果没有合法的记录，也不打印下面这一句。
        if (flag)
            printf("Total amount: $%0.2f\n", totalCharge);
    }
}
```


## 1017 Queueing at Bank (25 分)

1. 计算平均值，如果结果错了，不要只是检查被除数，还要看看除数是否计算正确。
2. 做减法，注意到结果可能为负，可能要考虑减数和被减数的大小关系。

```cpp
#include <iostream>
#include <algorithm>
using namespace std;

const int open = 8*3600;
const int close = 17*3600;

pair<int, int> r[10001];

// win[i]表示窗口i可接待客户的时间戳。
int win[101];

// All the customers have to wait in line behind the yellow line,
// until it is his/her turn to be served and there is a window available.

int main() {
    int N, K, hour, minute, second, i, j, k, min, nValid;
    double wait;
    scanf("%d %d", &N, &K);
    for (i=0; i<N; i++) {
        scanf("%d:%d:%d %d", &hour, &minute, &second, &r[i].second);
        r[i].first = hour*3600 + minute*60 + second;
        r[i].second *= 60; // 输入的等待时间的单位是分钟。
    }
    for (i=0; i<K; i++)
        win[i] = open;
    // 按照到达时间升序排序。
    sort(r, r+N, [](const pair<int, int> &a, const pair<int, int> &b){ return a.first < b.first; });
    wait = 0;
    nValid = 0;
    for (i=0; i<N; i++) {
        if (r[i].first >= close)
            continue;
        min = 0x7fffffff;
        for (j=0; j<K; j++) {
            if (win[j] < min) {
                min = win[j];
                k = j;
            }
        }
        // 客户需要等待的时间是，最早可接待客户的窗口的时间减去客户到达的时间。
		// XXX 注意结合实际。
        if (win[k] >= r[i].first) {
            wait += (win[k] - r[i].first);
            win[k] += r[i].second;
        } else {
            win[k] = r[i].first + r[i].second;
        }
        nValid++;
        // printf("%ld %d %d %d\n", wait, r[i].first, k, win[k]);
    }
    // XXX 注意，取平均值是要在有效的记录上取，由于一些记录无效（达到时间>=close），
    // 所以除数不一定是N。
    printf("%.1lf\n", wait/(nValid*60));
}
```


## 1018 Public Bike Management (30 分)

1. Dijkstra + DFS。如果只有Dijkstra是不可以的，因为minNeed和minBack在路径上的传递不满足最优子结构，不是简单的相加的过程，只有在所有路径都确定了之后才能区选择最小的need和最小的back～
2. Dijkstra求最短路径，dfs求minNeed和minBack和path，dfs的时候模拟一遍需要调整的过程，求出最后得到的need和back，与minNeed和minBack比较然后根据情况更新path，最后输出minNeed path 和 minBack，记得path是从最后一个结点一直到第一个结点的，所以要倒着输出～
3. 树形递归。

```cpp
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int inf = 0x7fffffff;

int minNeed = inf;
int minBack = inf;

// the stations are numbered from 1 to N, and PBMC is represented by the vertex 0.
// weight[0]代表PBMC。
int weight[501]; // 存储点权。

// 邻接矩阵。
int graph[501][501]; // 存储边权。

bool visited[501];
int dis[501]; // dis[i]表示PBMC到结点i的最短路径的边权和。

vector<int> pre[501]; // pre[i]表示PBMC到结点i的最短路径中，结点i的前驱结点，可能有多条最短路径，所以结点i可能有多个前驱结点。
vector<int> path, tempPath;

// 注意N是除PBMC外的结点数，故结点总数是N+1。
int C, N, S, M;

// 求PBMC到target的最短路径。
void dijkstra(int target) {
    int v, min, i, j;
    dis[0] = 0; // 使得第一次循环将PBMC并入已确定最短路径的集合。
    while (!visited[target]) {
        // 从未确定最短路径的结点集合中，每次找PBMC到vi/PBMC的最短的最短路径（边权和最小），将vi并入已确定最短路径的结点集合中。
        min = inf;
        for (i=0; i<=N; i++) {
            if (!visited[i] && dis[i] < min) {
                v = i;
                min = dis[i];
            }
        }
        // 将v并入已确定最短路径的集合中。
        visited[v] = true;
        // 考察将v作为中继结点。
        for (i=1; i<=N; i++) {
            // 考察未确定集合中的结点i，
            if (!visited[i] && graph[v][i]!=0) {
                if (dis[v]+graph[v][i]<dis[i]) {
                    // 通过v中继是否能够得到更短的路径。
                    dis[i] = dis[v]+graph[v][i];
                    pre[i].clear();
                    pre[i].push_back(v);
                } else if (dis[v]+graph[v][i]==dis[i]) {
                    // 通过v中继是否最短路径相等。
                    pre[i].push_back(v);
                }
            }
        }
    }
}

void dfs(int v) {
    tempPath.push_back(v);
    if (v == 0) {
        // base case
        // 现在tempPath存放了一条PBMC->S的最短路径，从总体上考察这条最短路径。
        int need = 0, back = 0, v;
        // weight[PBMC]为0，不必遍历。
        // 注意weight[S]不一定为0，还要注意从PBMC接着的那个点开始遍历，这样才能积累back。
        for (int i=tempPath.size()-2; i>=0; i--) {
            v = tempPath[i];
            if (weight[v] >= C/2) {
                // 该结点的权大于C/2，先将超出的部分累加到back中，这样权小于C/2的结点可以从back中补充。
                back += weight[v] - C/2;
            } else {
                // 先从back中减去。
                if (back >= C/2-weight[v]) {
                    back -= C/2-weight[v];
                } else {
                    need += C/2 - weight[v] - back;
                    back = 0;
                }
            }
        }
        if (need < minNeed) {
            minNeed = need;
            minBack = back;
            path = tempPath;
        } else if (need == minNeed && back < minBack) {
            minBack = back;
            path = tempPath;
        }
    }

    // 从v的前驱结点出发，遍历各条0->v的最短路径。
    // 对这个步骤，发挥想象。
    // XXX 这是一个树形递归，结点v可能有一个或多个前驱结点，设为n，那么这个循环就会从这个调用点处span出n个递归分支。
    // 虽然这n条递归分支并不是同时展开的，但当这个循环结束时，递归调用的路径会呈现出n个分支的样子。
    // 每个分支会直接到达一个结点，这些分支又会span一些分支，一直到叶子结点，即上面的base case，叶子结点才是真正做事的，然后层层返回。
    for (int i=0; i<pre[v].size(); i++) // 叶子结点没有前驱结点，故不会进入这个循环。
        dfs(pre[v][i]);

    tempPath.pop_back(); // 返回时恢复现场。
}

int main() {
    int i, j, k, x, v;
    scanf("%d %d %d %d", &C, &N, &S, &M);
    // 输入点权。
    // 注意条件`i<N`是错的，因为要输入除PBMC外的N个结点。
    for (i=1; i<=N; i++) {
        scanf("%d", &weight[i]);
        // 为调用dijkstra算法做的初始化。
        dis[i] = inf;
    }
    // 输入边权。
    for (i=0; i<M; i++) {
        scanf("%d %d %d", &j, &k, &x);
        // 无向图。
        graph[j][k] = x;
        graph[k][j] = x;
    }
    dijkstra(S);
    dfs(S);
    printf("%d 0", minNeed);
    for(int i = path.size() - 2; i >= 0; i--)
        printf("->%d", path[i]);
    printf(" %d\n", minBack);
}
```

参考：https://www.liuchuo.net/archives/2373


## 1019 General Palindromic Number (20 分)

1. 最大的输入是10^9，int正数最大为2^31-1，由于2^10可近似等于10^3，故可以用int存储。

```cpp
#include <iostream>
#include <vector>
using namespace std;

int N, b;

int main() {
    scanf("%d %d", &N, &b);
    // 负数不是回文数，刚好题目保证输入是正数。
    if (N < b) {
        printf("Yes\n%d\n", N);
        return 0;
    }
    int x = 0;
    vector<int> v;
    // 处理一半，也可以全部处理，然后比较两个数是否相等。
    // 如果输入的是字符串，那就反转字符串，看是否相等。
    // 处理一半有一些测试过不了，不清楚对哪些测试会过不了。
    /*
    while (x < N) {
        v.push_back(N%b);
        x = x*b + N%b;
        N /= b;
    }
    if (x==N || x/b==N)
        printf("Yes\n");
    else
        printf("No\n");
    while (N) {
        v.push_back(N%b);
        N /= b;
    }
    */
    int tmp = N;
    while (N) {
        v.push_back(N%b);
        x = x*b + N%b;
        N /= b;
    }
    if (x==tmp)
        printf("Yes\n");
    else
        printf("No\n");
    printf("%d", v[v.size()-1]);
    for (int i=v.size()-2; i>=0; i--)
        printf(" %d", v[i]);
    printf("\n");
}
```

上面判断是否为回文数的部分也可以：

```cpp
    bool flag = true;
    for (int i=0; i<v.size()/2; i++) {
        if (v[i] != v[v.size()-1-i]) {
            flag = false;
            break;
        }
    }
    if (flag)
```


## 1020 Tree Traversals (25 分)

1. 给出一颗二叉树（树中结点的关键字保证两两不同），以及该树的后序遍历序列和中序遍历序列，要求输出该树的层序遍历序列。
2. 一个非常朴素的想法是根据后序序列和中序序列，在内存中建立起这颗二叉树，然后对该二叉树进行层序遍历（广度优先搜索）。

```cpp
#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;

int N, p = 0;

struct Node {
    int key;
    Node *left, *right;
    Node(int k): key(k), left(nullptr), right(nullptr) {}
};

int postorder[31];
int inorder[31];

// 在inorder中，从start开始，返回x的下标。
int indexOf(int start, int x) {
    for (; start<N; start++)
        if (inorder[start] == x)
            return start;
    return -1; // 如果发生segmentation fault，我们就直到是这里返回-1导致索引数组出错。
}

Node* createBinTree(int lp, int li, int n) {
    if (n<=0) {
        return nullptr;
    }
    int root = postorder[lp+n-1]; // 这个根是相对的。
    Node *t = new Node(root);
    int j = indexOf(li, root); // j现在指向中序序列中的root。
    // XXX 注意，我们不能拿j与lp进行运算，这没有意义，因为j是特定与inorder计算出来的。
    int leftSubSize = j-li;
    int rightSubSize = n-leftSubSize-1;
    t->left = createBinTree(lp, li, leftSubSize);
    t->right = createBinTree(lp+leftSubSize, j+1, rightSubSize);
    return t;
}

void levelOrderTraversal(Node *t) {
    queue<Node*> q;
    q.push(t);
    printf("%d", t->key);
    Node *p;
    while (!q.empty()) {
        p = q.front();
        q.pop();
        if (p->left) {
            q.push(p->left);
            printf(" %d", p->left->key);
        }
        if (p->right) {
            q.push(p->right);
            printf(" %d", p->right->key);
        }
    }
    printf("\n");
}

int main() {
    int i, j;
    scanf("%d", &N);
    for (i=0; i<N; i++)
        scanf("%d", &postorder[i]);
    for (i=0; i<N; i++)
        scanf("%d", &inorder[i]);
    Node *t = createBinTree(0, 0, N);
    levelOrderTraversal(t);
}
```
